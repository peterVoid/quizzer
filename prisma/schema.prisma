datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String                 @id @default(cuid())
  name                 String
  username             String                 @unique
  email                String?                @unique
  hashedPassword       String?
  emailVerified        DateTime?              @map("email_verified")
  image                String?
  isAdmin              Boolean                @default(false)
  onboarded            Boolean                @default(false)
  accounts             Account[]
  sessions             Session[]
  interests            UserInterest[]
  Quizz                Quizz[]
  recentlyStartedQuizz RecentlyStartedQuizz[]

  @@map("users")
}

model UserInterest {
  id       String   @id @default(cuid())
  interest String[]
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, interest])
  @@map("user_interests")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id    String  @id @default(cuid())
  name  String  @unique
  image String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizz     Quizz[]

  @@map("categories")
}

model Quizz {
  id                   String                   @id @default(cuid())
  title                String
  description          String
  thumbnail            String?
  userId               String?
  user                 User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId           String
  category             Category                 @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  questions            QuizzQustionAndOptions[]
  recentlyStartedQuizz RecentlyStartedQuizz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quizz")
}

model QuizzQustionAndOptions {
  id              String @default(cuid())
  questionTitle   String
  questionOptions Json
  correctAnswer   String
  quizzId         String
  quizz           Quizz  @relation(fields: [quizzId], references: [id], onDelete: Cascade)

  @@id([id, quizzId])
  @@map("quizzQuestionAndOptions")
}

model RecentlyStartedQuizz {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizzId String
  quizz   Quizz  @relation(fields: [quizzId], references: [id], onDelete: Cascade)

  startedAt DateTime @default(now())

  @@unique([quizzId, userId])
  @@map("recentlyStartedQuizz")
}
